{"version": 1, "world": [{"name": "at", "arguments": [{"name": "P", "type": "P"}, {"name": "r_1", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_0", "type": "c"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "c_1", "type": "c"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_0", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_10", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_11", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_13", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_14", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_15", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_19", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_2", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_4", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_5", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_6", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "f_9", "type": "f"}, {"name": "r_8", "type": "r"}]}, {"name": "at", "arguments": [{"name": "oven_0", "type": "oven"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_0", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_1", "type": "s"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_2", "type": "s"}, {"name": "r_5", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_3", "type": "s"}, {"name": "r_11", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_4", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_5", "type": "s"}, {"name": "r_4", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_6", "type": "s"}, {"name": "r_2", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_7", "type": "s"}, {"name": "r_3", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_8", "type": "s"}, {"name": "r_6", "type": "r"}]}, {"name": "at", "arguments": [{"name": "s_9", "type": "s"}, {"name": "r_7", "type": "r"}]}, {"name": "at", "arguments": [{"name": "stove_0", "type": "stove"}, {"name": "r_0", "type": "r"}]}, {"name": "at", "arguments": [{"name": "toaster_0", "type": "toaster"}, {"name": "r_6", "type": "r"}]}, {"name": "base", "arguments": [{"name": "f_0", "type": "f"}, {"name": "ingredient_0", "type": "ingredient"}]}, {"name": "base", "arguments": [{"name": "f_1", "type": "f"}, {"name": "ingredient_1", "type": "ingredient"}]}, {"name": "base", "arguments": [{"name": "f_2", "type": "f"}, {"name": "ingredient_2", "type": "ingredient"}]}, {"name": "base", "arguments": [{"name": "f_3", "type": "f"}, {"name": "ingredient_3", "type": "ingredient"}]}, {"name": "base", "arguments": [{"name": "f_4", "type": "f"}, {"name": "ingredient_4", "type": "ingredient"}]}, {"name": "chopped", "arguments": [{"name": "ingredient_1", "type": "ingredient"}]}, {"name": "chopped", "arguments": [{"name": "ingredient_3", "type": "ingredient"}]}, {"name": "chopped", "arguments": [{"name": "ingredient_4", "type": "ingredient"}]}, {"name": "closed", "arguments": [{"name": "c_0", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "c_1", "type": "c"}]}, {"name": "closed", "arguments": [{"name": "d_0", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_1", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_2", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_3", "type": "d"}]}, {"name": "closed", "arguments": [{"name": "d_4", "type": "d"}]}, {"name": "cookable", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_11", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_12", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_13", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_14", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_15", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_16", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_17", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_18", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_19", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_20", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_21", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_22", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "cookable", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "cooking_location", "arguments": [{"name": "r_0", "type": "r"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "cuttable", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_11", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_12", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_13", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_14", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_15", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_16", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_17", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_18", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_19", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_20", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_21", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_22", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "cuttable", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "east_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_5", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_11", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_7", "type": "r"}]}, {"name": "east_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "edible", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_11", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_12", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_13", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_14", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_15", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_16", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_17", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_18", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_19", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_20", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_21", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_22", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "edible", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "free", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_3", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "free", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "free", "arguments": [{"name": "slot_0", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_1", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_2", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_3", "type": "slot"}]}, {"name": "free", "arguments": [{"name": "slot_4", "type": "slot"}]}, {"name": "fried", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "grilled", "arguments": [{"name": "ingredient_3", "type": "ingredient"}]}, {"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_12", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_16", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_18", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "f_20", "type": "f"}, {"name": "c_0", "type": "c"}]}, {"name": "in", "arguments": [{"name": "ingredient_0", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "in", "arguments": [{"name": "ingredient_1", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "in", "arguments": [{"name": "ingredient_2", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "in", "arguments": [{"name": "ingredient_3", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "in", "arguments": [{"name": "ingredient_4", "type": "ingredient"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "inedible", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "inedible", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "inedible", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "inedible", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "inedible", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "inedible", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "ingredient_1", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "ingredient_2", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "ingredient_3", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "ingredient_4", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "ingredient_5", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_5", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_0", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_10", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_11", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_11", "type": "r"}, {"name": "d_4", "type": "d"}, {"name": "r_10", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_2", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_9", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_5", "type": "r"}, {"name": "d_0", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_1", "type": "d"}, {"name": "r_0", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_6", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_7", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_7", "type": "r"}, {"name": "d_2", "type": "d"}, {"name": "r_6", "type": "r"}]}, {"name": "link", "arguments": [{"name": "r_9", "type": "r"}, {"name": "d_3", "type": "d"}, {"name": "r_2", "type": "r"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "needs_cooking", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "north_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_4", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "north_of", "arguments": [{"name": "r_8", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "on", "arguments": [{"name": "f_17", "type": "f"}, {"name": "s_1", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_21", "type": "f"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_22", "type": "f"}, {"name": "s_1", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_3", "type": "f"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_7", "type": "f"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "f_8", "type": "f"}, {"name": "s_3", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_0", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "on", "arguments": [{"name": "o_1", "type": "o"}, {"name": "s_0", "type": "s"}]}, {"name": "out", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "RECIPE", "type": "RECIPE"}]}, {"name": "raw", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_11", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_12", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_13", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_14", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_15", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_16", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_17", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_18", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_19", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_20", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_21", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_22", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "raw", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "roasted", "arguments": [{"name": "ingredient_1", "type": "ingredient"}]}, {"name": "roasted", "arguments": [{"name": "ingredient_2", "type": "ingredient"}]}, {"name": "roasted", "arguments": [{"name": "ingredient_4", "type": "ingredient"}]}, {"name": "sharp", "arguments": [{"name": "o_1", "type": "o"}]}, {"name": "sliced", "arguments": [{"name": "ingredient_0", "type": "ingredient"}]}, {"name": "sliced", "arguments": [{"name": "ingredient_2", "type": "ingredient"}]}, {"name": "south_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_6", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_1", "type": "r"}, {"name": "r_4", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_2", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_6", "type": "r"}, {"name": "r_8", "type": "r"}]}, {"name": "south_of", "arguments": [{"name": "r_9", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "uncut", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_10", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_11", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_12", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_13", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_14", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_15", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_16", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_17", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_18", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_19", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_20", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_21", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_22", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_5", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_6", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_7", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_8", "type": "f"}]}, {"name": "uncut", "arguments": [{"name": "f_9", "type": "f"}]}, {"name": "west_of", "arguments": [{"name": "r_0", "type": "r"}, {"name": "r_1", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_10", "type": "r"}, {"name": "r_9", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_11", "type": "r"}, {"name": "r_10", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_3", "type": "r"}, {"name": "r_2", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_5", "type": "r"}, {"name": "r_0", "type": "r"}]}, {"name": "west_of", "arguments": [{"name": "r_7", "type": "r"}, {"name": "r_6", "type": "r"}]}], "grammar": {"theme": "house", "names_to_exclude": ["livingroom", "backyard", "patio chair", "", "tomato", "green apple", "supermarket", "pork chop", "yellow apple", "showcase", "cookbook", "carrot", "fridge", "frosted-glass door", "banana", "corridor", "wooden door", "sofa", "purple potato", "orange bell pepper", "street", "red bell pepper", "garden", "white onion", "table", "pantry", "driveway", "patio table", "red apple", "knife", "screen door", "front door", "green hot pepper", "bedroom", "shelf", "counter", "toilet", "bathroom", "green bell pepper", "kitchen", "toolbox", "yellow potato", "BBQ", "red onion", "workbench", "lettuce", "stove", "red hot pepper", "meal", "shed", "commercial glass door", "red tuna", "red potato", "yellow bell pepper", "oven", "white tuna", null, "block of cheese", "bed", "yellow onion"], "include_adj": false, "blend_descriptions": false, "ambiguous_instructions": false, "only_last_action": false, "blend_instructions": false, "allowed_variables_numbering": false, "unique_expansion": false}, "quests": [{"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_0", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_1", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_2", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_2", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_3", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_3", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 0, "commands": [], "win_events": [], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "f_4", "type": "f"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "f_4", "type": "f"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "roasted", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "roasted", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "grilled", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "grilled", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "fried", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "fried", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "chopped", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "chopped", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "sliced", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "sliced", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "diced", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "diced", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "in", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "I", "type": "I"}]}], "postconditions": [{"name": "in", "arguments": [{"name": "meal_0", "type": "meal"}, {"name": "I", "type": "I"}]}, {"name": "event", "arguments": [{"name": "I", "type": "I"}, {"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_0", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_0", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_1", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_1", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_2", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_2", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_3", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_3", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}, {"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "f_4", "type": "f"}]}, {"name": "event", "arguments": [{"name": "f_4", "type": "f"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}, {"desc": "", "reward": 1, "commands": [], "win_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "consumed", "arguments": [{"name": "meal_0", "type": "meal"}]}], "postconditions": [{"name": "consumed", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "event", "arguments": [{"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "fail_events": [{"commands": [], "actions": [], "condition": {"name": "trigger", "preconditions": [{"name": "burned", "arguments": [{"name": "meal_0", "type": "meal"}]}], "postconditions": [{"name": "burned", "arguments": [{"name": "meal_0", "type": "meal"}]}, {"name": "event", "arguments": [{"name": "meal_0", "type": "meal"}]}], "command_template": null, "reverse_name": null, "reverse_command_template": null}}], "optional": false, "repeatable": false}], "infos": [["P", {"id": "P", "type": "P", "name": null, "noun": null, "adj": null, "desc": null, "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["I", {"id": "I", "type": "I", "name": null, "noun": null, "adj": null, "desc": null, "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["r_0", {"id": "r_0", "type": "r", "name": "kitchen", "noun": null, "adj": null, "desc": "You find yourself in a kitchen. An ordinary one.\n\n Hey, want to see a fridge? Look over there, a fridge.[if c_0 is open and there is something in the c_0] The fridge contains [a list of things in the c_0].[end if][if c_0 is open and the c_0 contains nothing] The fridge is empty! This is the worst thing that could possibly happen, ever![end if] You can see [if oven_0 is locked]a locked[else if oven_0 is open]an opened[otherwise]a closed[end if] conventional looking oven in the room.[if oven_0 is open and there is something in the oven_0] The oven contains [a list of things in the oven_0]. Classic TextWorld.[end if][if oven_0 is open and the oven_0 contains nothing] What a letdown! The oven is empty![end if] You rest your hand against a wall, but you miss the wall and fall onto a table. The table is massive.[if there is something on the s_0] On the table you can see [a list of things on the s_0].[end if][if there is nothing on the s_0] But the thing is empty, unfortunately. Oh! Why couldn't there just be stuff on it?[end if] You hear a noise behind you and spin around, but you can't see anything other than a counter. [if there is something on the s_1]On the counter you can make out [a list of things on the s_1].[end if][if there is nothing on the s_1]Unfortunately, there isn't a thing on it. It would have been so cool if there was stuff on the counter.[end if] You can make out a stove. What a coincidence, weren't you just thinking about a stove? [if there is something on the stove_0]You see [a list of things on the stove_0] on the stove. Something scurries by right in the corner of your eye. Probably nothing.[end if][if there is nothing on the stove_0]Looks like someone's already been here and taken everything off it, though.[end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] screen door leading north. There is [if d_0 is open]an open[otherwise]a closed[end if] frosted-glass door leading west. There is an exit to the east. Don't worry, there is no door.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["r_5", {"id": "r_5", "type": "r", "name": "pantry", "noun": null, "adj": null, "desc": "Ah, the pantry. This is some kind of pantry, really great ordinary vibes in this place, a wonderful ordinary atmosphere. And now, well, you're in it.\n\n You can see a shelf. Why don't you take a picture of it, it'll last longer! [if there is something on the s_2]You see [a list of things on the s_2] on the shelf, so there's that.[end if][if there is nothing on the s_2]But the thing is empty, unfortunately.[end if]\n\n There is [if d_0 is open]an open[otherwise]a closed[end if] frosted-glass door leading east.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["r_1", {"id": "r_1", "type": "r", "name": "corridor", "noun": null, "adj": null, "desc": "You've entered a corridor.\n\n\n\nYou need an exit without a door? You should try going north. You don't like doors? Why not try going south, that entranceway is not blocked by one. You need an exit without a door? You should try going west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_10", {"id": "r_10", "type": "r", "name": "street", "noun": null, "adj": null, "desc": "You are in a street. An ordinary kind of place.\n\n\n\n There is [if d_4 is open]an open[otherwise]a closed[end if] commercial glass door leading west. You need an exit without a door? You should try going east.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_11", {"id": "r_11", "type": "r", "name": "supermarket", "noun": null, "adj": null, "desc": "You've entered a supermarket.\n\n You see a showcase. The showcase is metallic.[if there is something on the s_3] On the showcase you can make out [a list of things on the s_3]. There's something strange about this being here, but you can't put your finger on it.[end if][if there is nothing on the s_3] But the thing hasn't got anything on it.[end if]\n\n There is [if d_4 is open]an open[otherwise]a closed[end if] commercial glass door leading east.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_2", {"id": "r_2", "type": "r", "name": "livingroom", "noun": null, "adj": null, "desc": "You find yourself in a livingroom. An ordinary one.\n\n You can make out a sofa. [if there is something on the s_6]You see [a list of things on the s_6] on the sofa.[end if][if there is nothing on the s_6]But oh no! there's nothing on this piece of trash.[end if]\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] front door leading south. There is an exit to the north. You need an exit without a door? You should try going west.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_3", {"id": "r_3", "type": "r", "name": "bedroom", "noun": null, "adj": null, "desc": "Look around you. Take it all in. It's not every day someone gets to be in a bedroom.\n\n You can make out a bed. [if there is something on the s_7]On the bed you can make out [a list of things on the s_7].[end if][if there is nothing on the s_7]But the thing is empty.[end if]\n\nYou don't like doors? Why not try going east, that entranceway is not blocked by one.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_6", {"id": "r_6", "type": "r", "name": "backyard", "noun": null, "adj": null, "desc": "You arrive in a backyard. A standard kind of place. You start to take note of what's in the room.\n\n You can see a patio chair. [if there is something on the s_4]On the patio chair you can make out [a list of things on the s_4], so there's that.[end if][if there is nothing on the s_4]But there isn't a thing on it. Oh! Why couldn't there just be stuff on it?[end if] You can see a patio table. The patio table is stylish.[if there is something on the s_8] On the patio table you can see [a list of things on the s_8]. There's something strange about this thing being here, but you don't have time to worry about that now.[end if][if there is nothing on the s_8] But the thing is empty, unfortunately.[end if] As if things weren't amazing enough already, you can even see a BBQ.[if toaster_0 is open and there is something in the toaster_0] The BBQ contains [a list of things in the toaster_0].[end if][if toaster_0 is open and the toaster_0 contains nothing] The BBQ is empty! What a waste of a day![end if]\n\n There is [if d_1 is open]an open[otherwise]a closed[end if] screen door leading south. There is [if d_2 is open]an open[otherwise]a closed[end if] wooden door leading west. You don't like doors? Why not try going north, that entranceway is not blocked by one.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["r_7", {"id": "r_7", "type": "r", "name": "shed", "noun": null, "adj": null, "desc": "You arrive in a shed. An ordinary one. You try to gain information on your surroundings by using a technique you call 'looking.'\n\n You can see [if c_1 is locked]a locked[else if c_1 is open]an opened[otherwise]a closed[end if] toolbox right there by you.[if c_1 is open and there is something in the c_1] The toolbox contains [a list of things in the c_1]. You idly wonder how they came up with the name TextWorld for this place. It's pretty fitting.[end if][if c_1 is open and the c_1 contains nothing] The toolbox is empty! This is the worst thing that could possibly happen, ever![end if] You see a workbench. The workbench is wooden.[if there is something on the s_9] On the workbench you make out [a list of things on the s_9].[end if][if there is nothing on the s_9] Looks like someone's already been here and taken everything off it, though.[end if]\n\n There is [if d_2 is open]an open[otherwise]a closed[end if] wooden door leading east.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_9", {"id": "r_9", "type": "r", "name": "driveway", "noun": null, "adj": null, "desc": "You've just sauntered into a driveway.\n\n\n\n There is [if d_3 is open]an open[otherwise]a closed[end if] front door leading north. There is an exit to the west.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["r_4", {"id": "r_4", "type": "r", "name": "bathroom", "noun": null, "adj": null, "desc": "You are in a bathroom. An ordinary one. I guess you better just go and list everything you see here.\n\n You see a gleam over in a corner, where you can see a toilet. [if there is something on the s_5]You see [a list of things on the s_5] on the toilet.[end if][if there is nothing on the s_5]The toilet appears to be empty. It would have been so cool if there was stuff on the toilet.[end if]\n\nYou don't like doors? Why not try going south, that entranceway is not blocked by one.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["r_8", {"id": "r_8", "type": "r", "name": "garden", "noun": null, "adj": null, "desc": "You arrive in a garden. A standard one. You begin looking for stuff.\n\n\n\nYou don't like doors? Why not try going south, that entranceway is not blocked by one.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["d_0", {"id": "d_0", "type": "d", "name": "frosted-glass door", "noun": null, "adj": null, "desc": "It's a stuffy [noun] [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_1", {"id": "d_1", "type": "d", "name": "screen door", "noun": null, "adj": null, "desc": "The [noun] looks stuffy. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["d_4", {"id": "d_4", "type": "d", "name": "commercial glass door", "noun": null, "adj": null, "desc": "It is what it is, a [noun]. [if open]You can see inside it.[else if locked]There is a lock on it and seems impossible to crack open.[otherwise]You can't see inside it because the lid's in your way.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_3", {"id": "d_3", "type": "d", "name": "front door", "noun": null, "adj": null, "desc": "It's a well-built [noun] [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["d_2", {"id": "d_2", "type": "d", "name": "wooden door", "noun": null, "adj": null, "desc": "It's a commanding [noun] [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["c_0", {"id": "c_0", "type": "c", "name": "fridge", "noun": "fridge", "adj": "conventional", "desc": "The [noun] looks manageable. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["c_1", {"id": "c_1", "type": "c", "name": "toolbox", "noun": "toolbox", "adj": "metallic", "desc": "The [noun] looks durable. [if open]It is open.[else if locked]It is locked.[otherwise]It is closed.[end if]", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["f_0", {"id": "f_0", "type": "f", "name": "green hot pepper", "noun": "green hot pepper", "adj": "", "desc": "The [noun] looks savory.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_10", {"id": "f_10", "type": "f", "name": "red potato", "noun": "red potato", "adj": "", "desc": "The [noun] looks savory.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_11", {"id": "f_11", "type": "f", "name": "lettuce", "noun": "lettuce", "adj": "", "desc": "The [noun] looks delectable.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_13", {"id": "f_13", "type": "f", "name": "white onion", "noun": "white onion", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_14", {"id": "f_14", "type": "f", "name": "banana", "noun": "banana", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_15", {"id": "f_15", "type": "f", "name": "green apple", "noun": "green apple", "adj": "", "desc": "The [noun] looks delicious.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_19", {"id": "f_19", "type": "f", "name": "red hot pepper", "noun": "red hot pepper", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_2", {"id": "f_2", "type": "f", "name": "purple potato", "noun": "purple potato", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_4", {"id": "f_4", "type": "f", "name": "yellow potato", "noun": "yellow potato", "adj": "", "desc": "The [noun] looks delicious.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_5", {"id": "f_5", "type": "f", "name": "green bell pepper", "noun": "green bell pepper", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_6", {"id": "f_6", "type": "f", "name": "red bell pepper", "noun": "red bell pepper", "adj": "", "desc": "The [noun] looks inviting.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_9", {"id": "f_9", "type": "f", "name": "yellow onion", "noun": "yellow onion", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["oven_0", {"id": "oven_0", "type": "oven", "name": "oven", "noun": "oven", "adj": "conventional", "desc": "Useful for roasting things.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_0", {"id": "s_0", "type": "s", "name": "table", "noun": "table", "adj": "massive", "desc": "The [noun] is undependable.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_1", {"id": "s_1", "type": "s", "name": "counter", "noun": "counter", "adj": "vast", "desc": "The [noun] is an unstable piece of junk.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["s_2", {"id": "s_2", "type": "s", "name": "shelf", "noun": "shelf", "adj": "wooden", "desc": "The [noun] is solid.", "room_type": "cook", "definite": null, "indefinite": null, "synonyms": null}], ["s_3", {"id": "s_3", "type": "s", "name": "showcase", "noun": "showcase", "adj": "metallic", "desc": "The [noun] is wobbly.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_4", {"id": "s_4", "type": "s", "name": "patio chair", "noun": "patio chair", "adj": "stylish", "desc": "The [noun] is solid.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_5", {"id": "s_5", "type": "s", "name": "toilet", "noun": "toilet", "adj": "white", "desc": "The [noun] is wobbly.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_6", {"id": "s_6", "type": "s", "name": "sofa", "noun": "sofa", "adj": "comfy", "desc": "The [noun] is unstable.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_7", {"id": "s_7", "type": "s", "name": "bed", "noun": "bed", "adj": "large", "desc": "The [noun] is wobbly.", "room_type": "clean", "definite": null, "indefinite": null, "synonyms": null}], ["s_8", {"id": "s_8", "type": "s", "name": "patio table", "noun": "patio table", "adj": "stylish", "desc": "The [noun] is an unstable piece of trash.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["s_9", {"id": "s_9", "type": "s", "name": "workbench", "noun": "workbench", "adj": "wooden", "desc": "The [noun] is wobbly.", "room_type": "rest", "definite": null, "indefinite": null, "synonyms": null}], ["stove_0", {"id": "stove_0", "type": "stove", "name": "stove", "noun": "stove", "adj": "conventional", "desc": "Useful for frying things.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["toaster_0", {"id": "toaster_0", "type": "toaster", "name": "BBQ", "noun": "BBQ", "adj": "recent", "desc": "Useful for grilling things.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_1", {"id": "f_1", "type": "f", "name": "pork chop", "noun": "pork chop", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_3", {"id": "f_3", "type": "f", "name": "red tuna", "noun": "red tuna", "adj": "", "desc": "That's a [noun]!", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_1", {"id": "ingredient_1", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_3", {"id": "ingredient_3", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_4", {"id": "ingredient_4", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["f_12", {"id": "f_12", "type": "f", "name": "red onion", "noun": "red onion", "adj": "", "desc": "The [noun] looks heavenly.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_16", {"id": "f_16", "type": "f", "name": "carrot", "noun": "carrot", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_17", {"id": "f_17", "type": "f", "name": "tomato", "noun": "tomato", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_18", {"id": "f_18", "type": "f", "name": "orange bell pepper", "noun": "orange bell pepper", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_20", {"id": "f_20", "type": "f", "name": "yellow bell pepper", "noun": "yellow bell pepper", "adj": "", "desc": "The [noun] looks inviting.", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_21", {"id": "f_21", "type": "f", "name": "block of cheese", "noun": "block of cheese", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_22", {"id": "f_22", "type": "f", "name": "yellow apple", "noun": "yellow apple", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}], ["f_7", {"id": "f_7", "type": "f", "name": "red apple", "noun": "red apple", "adj": "", "desc": "The [noun] looks appetizing.", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["f_8", {"id": "f_8", "type": "f", "name": "white tuna", "noun": "white tuna", "adj": "", "desc": "You couldn't pay me to eat that [noun].", "room_type": "work", "definite": null, "indefinite": null, "synonyms": null}], ["meal_0", {"id": "meal_0", "type": "meal", "name": "meal", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_0", {"id": "slot_0", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_1", {"id": "slot_1", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_2", {"id": "slot_2", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_3", {"id": "slot_3", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["slot_4", {"id": "slot_4", "type": "slot", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_0", {"id": "ingredient_0", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["RECIPE", {"id": "RECIPE", "type": "RECIPE", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["ingredient_2", {"id": "ingredient_2", "type": "ingredient", "name": "", "noun": null, "adj": null, "desc": "", "room_type": null, "definite": null, "indefinite": null, "synonyms": null}], ["o_0", {"id": "o_0", "type": "o", "name": "cookbook", "noun": "cookbook", "adj": "interesting", "desc": "You open the copy of 'Cooking: A Modern Approach (3rd Ed.)' and start reading:\n\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\ngreen hot pepper\n  pork chop\n  purple potato\n  red tuna\n  yellow potato\n\nDirections:\nslice the green hot pepper\n  fry the green hot pepper\n  chop the pork chop\n  roast the pork chop\n  slice the purple potato\n  roast the purple potato\n  chop the red tuna\n  grill the red tuna\n  chop the yellow potato\n  roast the yellow potato\n  prepare meal\n", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": ["recipe"]}], ["o_1", {"id": "o_1", "type": "o", "name": "knife", "noun": "knife", "adj": "sharp", "desc": "The [noun] looks to fit in here", "room_type": "storage", "definite": null, "indefinite": null, "synonyms": null}]], "KB": {"logic": "type ingredient : t {\n    predicates {\n        base(f, ingredient);\n\n        raw(ingredient);\n        roasted(ingredient);\n        fried(ingredient);\n        # cooked(ingredient);\n\n        uncut(ingredient);\n        chopped(ingredient);\n        sliced(ingredient);\n        diced(ingredient);\n    }\n\n    inform7 {\n        predicates {\n            #base(f, ingredient) :: \"When play begins, the base of {ingredient} is {f}\";\n            base(f, ingredient) :: \"The base of {ingredient} is {f}\";\n\n            raw(ingredient) :: \"The {ingredient} is raw\";\n            # cooked(ingredient) :: \"The base of {ingredient} is cooked\";\n            fried(ingredient) :: \"The {ingredient} is fried\";\n            grilled(ingredient) :: \"The {ingredient} is grilled\";\n            roasted(ingredient) :: \"The {ingredient} is roasted\";\n\n            uncut(ingredient) :: \"The {ingredient} is uncut\";\n            sliced(ingredient) :: \"The {ingredient} is sliced\";\n            chopped(ingredient) :: \"The {ingredient} is chopped\";\n            diced(ingredient) :: \"The {ingredient} is diced\";\n        }\n\n        type {\n            kind :: \"ingredient-like\";\n            definition :: \"ingredient-like has a thing called base. ingredient-like has a type of cooking. ingredient-like has a type of cutting.\";\n        }\n    }\n}\n\n# meal\ntype meal : f {\n    inform7 {\n        type {\n            kind :: \"meal-like\";\n        }\n    }\n}\n\ntype RECIPE {\n    predicates {\n        ingredient_1(f);\n        ingredient_2(f);\n        ingredient_3(f);\n        ingredient_4(f);\n        ingredient_5(f);\n        used(f);\n        cooking_location(r, RECIPE);\n        in(ingredient, RECIPE);\n        out(meal, RECIPE);\n        player_in_cooking_location(P, r) = at(P, r) & cooking_location(r, RECIPE);\n    }\n\n    rules {\n        make/recipe/1 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & $out(meal, RECIPE) -> in(meal, I) & edible(meal) & used(f) & raw(meal);\n        make/recipe/2 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & $out(meal, RECIPE) & $used(slot) & used(slot') -> in(meal, I) & free(slot') & edible(meal) & used(f) & used(f') & raw(meal);\n        make/recipe/3 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & edible(meal) & used(f) & used(f') & used(f'') & raw(meal);\n        make/recipe/4 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') & used(slot'') -> in(meal, I) & free(slot') & free(slot'') & free(slot''') & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & raw(meal);\n        make/recipe/5 :: $player_in_cooking_location(P, r) & in(f, I) & $ingredient_1(f) & in(f', I) & $ingredient_2(f') & in(f'', I) & $ingredient_3(f'') & in(f''', I) & $ingredient_4(f''') & in(f'''', I) & $ingredient_5(f'''') & $out(meal, RECIPE) & $used(slot) & used(slot') & used(slot'') & used(slot''') & used(slot'''') -> in(meal, I) & free(slot') & free(slot'') & free(slot''') & free(slot'''') & edible(meal) & used(f) & used(f') & used(f'') & used(f''') & used(f'''') & raw(meal);\n    }\n\n    inform7 {\n        predicates {\n            ingredient_1(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_2(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_3(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_4(f) :: \"\";  # No equivalent in Inform7.\n            ingredient_5(f) :: \"\";  # No equivalent in Inform7.\n            cooking_location(r, RECIPE) :: \"The cooking location of the {RECIPE} is the {r}.\";\n            in(ingredient, RECIPE) :: \"When play begins, add {ingredient} to the ingredients of the {RECIPE}\";\n            out(meal, RECIPE) :: \"The meal of the {RECIPE} is the {meal}.\";\n        }\n\n        type {\n            kind :: \"recipe-like\";\n            definition :: \"A recipe-like is a kind of thing. A recipe-like has a list of ingredient-like called ingredients. A recipe-like has a thing called meal. A recipe-like has a room called cooking location.\";\n        }\n\n        commands {\n            make/recipe/1 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/2 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/3 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/4 :: \"prepare meal\" :: \"preparing meal\";\n            make/recipe/5 :: \"prepare meal\" :: \"preparing meal\";\n        }\n\n        code :: \"\"\"\n            [Ingredient]\n            Rule for printing the name of an ingredient-like (called I):\n                if type of cutting of I is not uncut:\n                    say  \"[type of cutting of I] \";\n                if type of cooking of I is not raw:\n                    say  \"[type of cooking of I] \";\n                say  \"[base of I]\";\n\n            [Preparing a meal]\n            Preparing meal is an action applying to nothing.\n            Before preparing meal:\n                if location is not the cooking location of the recipe:\n                    say \"Can only prepare meal in the [cooking location of the recipe].\";\n                    rule fails;\n                Repeat with ingredient running through the ingredients of the recipe:\n                    let F be the base of the ingredient;\n                    if player does not carry the F:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"You still miss something.\";\n                        rule fails;\n                    if type of cooking of F is not type of cooking of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cooked.\";\n                        rule fails;\n                    if type of cutting of F is not type of cutting of ingredient:\n                        [say \"The recipe requires [a ingredient].\";]\n                        say \"Something still needs to be cut.\";\n                        rule fails;\n\n            Carry out preparing meal:\n                say \"Adding the meal to your inventory.\";\n                Repeat with ingredient running through the ingredients of recipe:\n                    now the base of the ingredient is nowhere;\n                now the player carries the meal of the recipe;\n                set pronouns from the meal of the recipe.\n\n            Understand \"prepare meal\" as preparing meal.\n        \"\"\";\n    }\n}\n\n## pot\n#type pot : box {\n#\n#    inform7 {\n#        type {\n#            kind :: \"pot-like\";\n#            definition :: \"pot-like is a kind of box-like.\";\n#        }\n#\n#    }\n#}\n\n# oven\ntype oven : c {\n    rules {\n        cook/oven/burned :: $at(P, r) & $at(oven, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/oven/cooked/raw :: $at(P, r) & $at(oven, r) & $in(f, I) & raw(f)            -> roasted(f) & cooked(f);\n        cook/oven/cooked/needs_cooking :: $at(P, r) & $at(oven, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> roasted(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"oven-like\";\n            definition :: \"oven-like is a source of heat.\";\n        }\n\n        commands {\n            cook/oven/cooked/raw           :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/cooked/needs_cooking :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n            cook/oven/burned               :: \"cook {f} with {oven}\" :: \"cooking the {f} with the {oven}\";\n        }\n    }\n}\n\ntype toaster : c {\n    rules {\n        cook/toaster/burned :: $at(P, r) & $at(toaster, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/toaster/cooked/raw :: $at(P, r) & $at(toaster, r) & $in(f, I) & raw(f)            -> grilled(f) & cooked(f);\n        cook/toaster/cooked/needs_cooking :: $at(P, r) & $at(toaster, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> grilled(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"toaster-like\";\n            definition :: \"toaster-like is a source of heat.\";\n        }\n\n        commands {\n            cook/toaster/cooked/raw           :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/cooked/needs_cooking :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n            cook/toaster/burned               :: \"cook {f} with {toaster}\" :: \"cooking the {f} with the {toaster}\";\n        }\n    }\n}\n\n# Inventory\ntype slot {\n    predicates {\n        free(slot);\n        used(slot);\n    }\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"\";\n        }\n        predicates {\n            free(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n            used(slot) :: \"When play begins, increase the carrying capacity of the player by 1.\";\n        }\n    }\n}\n\ntype I {\n    predicates {\n        in(o, I);\n    }\n\n    rules {\n        inventory :: at(P, r) -> at(P, r);  # Nothing changes.\n\n        take :: $at(P, r) & at(o, r) & free(slot) -> in(o, I) & used(slot);\n        drop :: $at(P, r) & in(o, I) & used(slot) -> at(o, r) & free(slot);\n\n        take/c :: $at(P, r) & $at(c, r) & $open(c) & in(o, c) & free(slot) -> in(o, I) & used(slot);\n        insert :: $at(P, r) & $at(c, r) & $open(c) & in(o, I) & used(slot) -> in(o, c) & free(slot);\n\n        take/s :: $at(P, r) & $at(s, r) & on(o, s) & free(slot) -> in(o, I) & used(slot);\n        put    :: $at(P, r) & $at(s, r) & in(o, I) & used(slot) -> on(o, s) & free(slot);\n\n        examine/I :: at(o, I) -> at(o, I);\n        examine/s :: at(P, r) & $at(s, r) & $on(o, s) -> at(P, r);\n        examine/c :: at(P, r) & $at(c, r) & $open(c) & $in(o, c) -> at(P, r);\n    }\n\n    reverse_rules {\n        inventory :: inventory;\n        take :: drop;\n        take/c :: insert;\n        take/s :: put;\n    }\n\n    inform7 {\n        predicates {\n            in(o, I) :: \"The player carries the {o}\";\n        }\n\n        commands {\n            take :: \"take {o}\" :: \"taking the {o}\";\n            drop :: \"drop {o}\" :: \"dropping the {o}\";\n\n            take/c :: \"take {o} from {c}\" :: \"removing the {o} from the {c}\";\n            insert :: \"insert {o} into {c}\" :: \"inserting the {o} into the {c}\";\n\n            take/s :: \"take {o} from {s}\" :: \"removing the {o} from the {s}\";\n            put :: \"put {o} on {s}\" :: \"putting the {o} on the {s}\";\n\n            inventory :: \"inventory\" :: \"taking inventory\";\n\n            examine/I :: \"examine {o}\" :: \"examining the {o}\";\n            examine/s :: \"examine {o}\" :: \"examining the {o}\";\n            examine/c :: \"examine {o}\" :: \"examining the {o}\";\n        }\n    }\n}\n\n# key\ntype k : o {\n    predicates {\n        match(k, c);\n        match(k, d);\n    }\n\n    constraints {\n        k1 :: match(k, c) & match(k', c) -> fail();\n        k2 :: match(k, c) & match(k, c') -> fail();\n        k3 :: match(k, d) & match(k', d) -> fail();\n        k4 :: match(k, d) & match(k, d') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"key\";\n        }\n\n        predicates {\n            match(k, c) :: \"The matching key of the {c} is the {k}\";\n            match(k, d) :: \"The matching key of the {d} is the {k}\";\n        }\n    }\n}\n\n# door\ntype d : t {\n    predicates {\n        open(d);\n        closed(d);\n        locked(d);\n\n        link(r, d, r);\n    }\n\n    rules {\n        lock/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & closed(d) -> locked(d);\n        unlock/d :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & $in(k, I) & $match(k, d) & locked(d) -> closed(d);\n\n        open/d   :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & closed(d) -> open(d) & free(r, r') & free(r', r);\n        close/d  :: $at(P, r) & $link(r, d, r') & $link(r', d, r) & open(d) & free(r, r') & free(r', r) -> closed(d);\n    }\n\n    reverse_rules {\n        lock/d :: unlock/d;\n        open/d :: close/d;\n    }\n\n    constraints {\n        d1 :: open(d)   & closed(d) -> fail();\n        d2 :: open(d)   & locked(d) -> fail();\n        d3 :: closed(d) & locked(d) -> fail();\n\n        # A door can't be used to link more than two rooms.\n        link1 :: link(r, d, r') & link(r, d, r'') -> fail();\n        link2 :: link(r, d, r') & link(r'', d, r''') -> fail();\n\n        # There's already a door linking two rooms.\n        link3 :: link(r, d, r') & link(r, d', r') -> fail();\n\n        # There cannot be more than four doors in a room.\n        dr2 :: link(r, d1: d, r1: r) & link(r, d2: d, r2: r) & link(r, d3: d, r3: r) & link(r, d4: d, r4: r) & link(r, d5: d, r5: r) -> fail();\n\n        free1 :: link(r, d, r') & free(r, r') & closed(d) -> fail();\n        free2 :: link(r, d, r') & free(r, r') & locked(d) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"door\";\n            definition :: \"door is openable and lockable.\";\n        }\n\n        predicates {\n            open(d) :: \"The {d} is open\";\n            closed(d) :: \"The {d} is closed\";\n            locked(d) :: \"The {d} is locked\";\n            link(r, d, r') :: \"\";  # No equivalent in Inform7.\n        }\n\n        commands {\n            open/d :: \"open {d}\" :: \"opening {d}\";\n            close/d :: \"close {d}\" :: \"closing {d}\";\n\n            unlock/d :: \"unlock {d} with {k}\" :: \"unlocking {d} with the {k}\";\n            lock/d :: \"lock {d} with {k}\" :: \"locking {d} with the {k}\";\n        }\n    }\n}\n\n# food\ntype f : o {\n    predicates {\n        consumed(f);\n        edible(f);\n        inedible(f);\n\n        needs_cooking(f);\n        raw(f);\n        cooked(f);\n        burned(f);\n\n        roasted(f);\n        fried(f);\n        grilled(f);\n        # boiled(f);\n        # steamed(f);\n\n        uncut(f);\n        chopped(f);\n        sliced(f);\n        diced(f);\n    }\n\n    rules {\n        eat :: in(f, I) & edible(f) & used(slot) -> consumed(f) & free(slot);\n        drink :: in(f, I) & drinkable(f) & used(slot) -> consumed(f) & free(slot);\n        slice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> sliced(f);\n        dice :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> diced(f);\n        chop :: $in(f, I) & $in(o, I) & $sharp(o) & uncut(f) -> chopped(f);\n    }\n\n    constraints {\n        consumed1 :: consumed(f) & in(f, I) -> fail();\n        consumed2 :: consumed(f) & in(f, c) -> fail();\n        consumed3 :: consumed(f) & on(f, s) -> fail();\n        consumed4 :: consumed(f) & at(f, r) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"food\";\n            definition :: \"food is usually edible. food is cookable. food has a type of cooking. food has a type of cutting. food can be cooked. food can be burned. food can be consumed. food is usually not consumed. food is usually cuttable.\";\n        }\n\n        predicates {\n            edible(f) :: \"The {f} is edible\";\n            inedible(f) :: \"The {f} is inedible\";\n            consumed(f) :: \"The {f} is consumed\";\n\n            needs_cooking(f) :: \"The {f} is needs cooking\";\n\n            raw(f) :: \"The {f} is raw\";\n            cooked(f) :: \"The {f} is cooked\";\n            burned(f) :: \"The {f} is burned\";\n            fried(f) :: \"The {f} is fried\";\n            grilled(f) :: \"The {f} is grilled\";\n            roasted(f) :: \"The {f} is roasted\";\n\n            uncut(f) :: \"The {f} is uncut\";\n            sliced(f) :: \"The {f} is sliced\";\n            chopped(f) :: \"The {f} is chopped\";\n            diced(f) :: \"The {f} is diced\";\n        }\n\n        commands {\n            eat :: \"eat {f}\" :: \"eating the {f}\";\n            drink :: \"drink {f}\" :: \"drinking the {f}\";\n            slice :: \"slice {f} with {o}\" :: \"slicing the {f} with the {o}\";\n            dice  :: \"dice {f} with {o}\"  :: \"dicing the {f} with the {o}\";\n            chop  :: \"chop {f} with {o}\"  :: \"chopping the {f} with the {o}\";\n        }\n\n        code :: \"\"\"\n            [Drinking liquid]\n            Drinking carried thing is an action applying to one carried thing.\n            The block drinking rule is not listed in any rulebook.\n            Understand nothing as drinking.\n            Understand \"drink [something]\" as drinking carried thing.\n\n            After drinking carried thing:\n                Now the noun is consumed;\n                Continue the action.\n\n            Check an actor drinking carried thing (this is the can\u2019t drink unless drinkable rule):\n                if the noun is not a thing or the noun is not drinkable:\n                    say \"You cannot drink [the noun].\";\n                    rule fails;\n\n            Carry out an actor drinking carried thing (this is the drinking rule):\n                remove the noun from play.\n\n            Report an actor drinking carried thing (this is the report drinking rule):\n                if the actor is the player:\n                    say \"You drink [the noun]. Not bad.\";\n                otherwise:\n                    say \"[The person asked] just drunk [the noun].\".\n\n            [Eating food]\n            After eating a food (called target):\n                Now the target is consumed;\n                Continue the action.\n\n            Check eating inedible food (called target):\n                if target is needs cooking:\n                    say \"You should cook [the target] first.\";\n                    rule fails.\n\n            [Understanding things by their properties - http://inform7.com/learn/man/WI_17_15.html]\n            Understand the type of cutting property as describing food.\n            Understand the type of cooking property as describing food.\n\n            [Processing food]\n            Understand the commands  \"slice\", \"prune\" as something new.\n            The block cutting rule is not listed in any rulebook.\n            Dicing it with is an action applying to two carried things.\n            Slicing it with is an action applying to two carried things.\n            Chopping it with is an action applying to two carried things.\n\n            Slicing something with something is a cutting activity.\n            Dicing something with something is a cutting activity.\n            Chopping something with something is a cutting activity.\n\n            Does the player mean slicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean chopping something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Does the player mean dicing something with something carried (called target):\n                if target is not sharp:\n                    it is very unlikely;\n\n            Check an actor cutting (this is the generic cut is now allowed rule):\n                say \"You need to specify how you want to cut [the noun]. Either slice, dice, or chop it.\";\n                rule fails.\n\n            Before a cutting activity when the noun is not cuttable:\n                say \"Can only cut cuttable food.\";\n                rule fails.\n\n            Before a cutting activity when the noun is cuttable and the noun is not uncut:\n                say \"[The noun] is already [type of cutting of the noun].\";\n                rule fails.\n\n            Before a cutting activity when the second noun is not sharp:\n                say \"Cutting something requires a knife.\";\n                rule fails.\n\n            Before printing the name of a food (called the food item) which is not uncut while looking, examining, listing contents or taking inventory:\n                say \"[type of cutting of food item] \".\n\n            [Slicing food]\n            Carry out slicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"[The food item] is already [type of cutting of the food item].\";\n                    stop;\n                Now the food item is sliced;\n                say \"You slice the [food item].\".\n\n            Understand \"slice [something] with/using [something]\" as slicing it with.\n\n            [Dicing food]\n            Carry out dicing a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is diced;\n                say \"You dice the [food item].\".\n\n            Understand \"dice [something] with/using [something]\" as dicing it with.\n\n            [Chopping food]\n            Carry out chopping a carried food (called the food item) with a thing (called the tool):\n                if the food item is not uncut:\n                    say \"The [food item] has already been cut.\";\n                    stop;\n                Now the food item is chopped;\n                say \"You chop the [food item].\".\n\n            Understand the command \"chop\" as something new. [Remove its association with slicing]\n            Understand \"chop [something] with/using [something]\" as chopping it with.\n\n            [Cooking food]\n            Cooking it with is an action applying to one carried thing and one thing.\n\n            Does the player mean cooking something with something carried:\n                it is very unlikely;\n\n            Check cooking something not cookable with something (this is the cook only cookable things rule):\n                say \"Can only cook food.\" instead.\n\n            Check cooking something cookable with something not a source of heat (this is the cooking requires a source of heat rule):\n                say \"Cooking requires a source of heat.\" instead.\n\n            Carry out cooking a carried food (called the food item) with a thing (called a the source of heat):\n                if the food item is cooked:\n                    Now the food item is burned;\n                    Now the food item is not edible;\n                    say \"You burned the [food item]!\";\n                    stop;\n                otherwise:\n                    Now the food item is cooked;\n                if the food item is needs cooking:\n                    Now the food item is edible;\n                    Now the food item is not needs cooking;\n                if the source of heat is a stove-like:\n                    Now the food item is fried;\n                    say \"You fried the [food item].\";\n                else if the source of heat is a oven-like:\n                    Now the food item is roasted;\n                    say \"You roasted the [food item].\";\n                else if the source of heat is a toaster-like:\n                    Now the food item is grilled;\n                    say \"You grilled the [food item].\".\n\n            Understand \"cook [something] with/in/on/using [something]\" as cooking it with.\n\n            Before printing the name of a food (called the food item) while looking, examining, listing contents or taking inventory:\n                if the food item is needs cooking:\n                    say \"raw \";\n                else if the food item is burned:\n                    say \"burned \";\n                else if the food item is not raw:\n                    say \"[type of cooking of food item] \".\n\n        \"\"\";\n    }\n}\n\n# object\ntype o : t {\n    constraints {\n        obj1 :: in(o, I) & in(o, c) -> fail();\n        obj2 :: in(o, I) & on(o, s) -> fail();\n        obj3 :: in(o, I) & at(o, r) -> fail();\n        obj4 :: in(o, c) & on(o, s) -> fail();\n        obj5 :: in(o, c) & at(o, r) -> fail();\n        obj6 :: on(o, s) & at(o, r) -> fail();\n        obj7 :: at(o, r) & at(o, r') -> fail();\n        obj8 :: in(o, c) & in(o, c') -> fail();\n        obj9 :: on(o, s) & on(o, s') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"object-like\";\n            definition :: \"object-like is portable.\";\n        }\n    }\n}\n\n# room\ntype r {\n    predicates {\n        at(P, r);\n        at(t, r);\n\n        north_of(r, r);\n        west_of(r, r);\n\n        north_of/d(r, d, r);\n        west_of/d(r, d, r);\n\n        free(r, r);\n\n        south_of(r, r') = north_of(r', r);\n        east_of(r, r') = west_of(r', r);\n\n        south_of/d(r, d, r') = north_of/d(r', d, r);\n        east_of/d(r, d, r') = west_of/d(r', d, r);\n    }\n\n    rules {\n        go/north :: at(P, r) & $north_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/south :: at(P, r) & $south_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/east  :: at(P, r) & $east_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n        go/west  :: at(P, r) & $west_of(r', r) & $free(r, r') & $free(r', r) -> at(P, r');\n    }\n\n    reverse_rules {\n        go/north :: go/south;\n        go/west :: go/east;\n    }\n\n    constraints {\n        r1 :: at(P, r) & at(P, r') -> fail();\n        r2 :: at(s, r) & at(s, r') -> fail();\n        r3 :: at(c, r) & at(c, r') -> fail();\n\n        # An exit direction can only lead to one room.\n        nav_rr1 :: north_of(r, r') & north_of(r'', r') -> fail();\n        nav_rr2 :: south_of(r, r') & south_of(r'', r') -> fail();\n        nav_rr3 :: east_of(r, r') & east_of(r'', r') -> fail();\n        nav_rr4 :: west_of(r, r') & west_of(r'', r') -> fail();\n\n        # Two rooms can only be connected once with each other.\n        nav_rrA :: north_of(r, r') & south_of(r, r') -> fail();\n        nav_rrB :: north_of(r, r') & west_of(r, r') -> fail();\n        nav_rrC :: north_of(r, r') & east_of(r, r') -> fail();\n        nav_rrD :: south_of(r, r') & west_of(r, r') -> fail();\n        nav_rrE :: south_of(r, r') & east_of(r, r') -> fail();\n        nav_rrF :: west_of(r, r')  & east_of(r, r') -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"room\";\n        }\n\n        predicates {\n            at(P, r) :: \"The player is in {r}\";\n            at(s, r) :: \"The {s} is in {r}\";\n            at(c, r) :: \"The {c} is in {r}\";\n            at(o, r) :: \"The {o} is in {r}\";\n\n            north_of(r, r') :: \"The {r} is mapped north of {r'}\";\n            south_of(r, r') :: \"The {r} is mapped south of {r'}\";\n            east_of(r, r') :: \"The {r} is mapped east of {r'}\";\n            west_of(r, r') :: \"The {r} is mapped west of {r'}\";\n\n            north_of/d(r, d, r') :: \"South of {r} and north of {r'} is a door called {d}\";\n            south_of/d(r, d, r') :: \"North of {r} and south of {r'} is a door called {d}\";\n            east_of/d(r, d, r') :: \"West of {r} and east of {r'} is a door called {d}\";\n            west_of/d(r, d, r') :: \"East of {r} and west of {r'} is a door called {d}\";\n        }\n\n        commands {\n            go/north :: \"go north\" :: \"going north\";\n            go/south :: \"go south\" :: \"going south\";\n            go/east :: \"go east\" :: \"going east\";\n            go/west :: \"go west\" :: \"going west\";\n        }\n    }\n}\n\n# Player\ntype P {\n    rules {\n        look :: at(P, r) -> at(P, r);  # Nothing changes.\n    }\n\n    reverse_rules {\n        look :: look;\n    }\n\n    inform7 {\n        commands {\n            look :: \"look\" :: \"looking\";\n        }\n\n        code :: \"\"\"\n            The carrying capacity of the player is 0.\n        \"\"\";\n    }\n}\n\n# thing\ntype t {\n    predicates {\n        sharp(t);\n        cuttable(t);\n        cookable(t);\n        drinkable(t);\n    }\n\n    rules {\n        examine/t :: at(P, r) & $at(t, r) -> at(P, r);\n    }\n\n    inform7 {\n        type {\n            kind :: \"thing\";\n            definition :: \"a thing can be drinkable. a thing is usually not drinkable. a thing can be cookable. a thing is usually not cookable. a thing can be damaged. a thing is usually not damaged. a thing can be sharp. a thing is usually not sharp. a thing can be cuttable. a thing is usually not cuttable. a thing can be a source of heat. Type of cooking is a kind of value. The type of cooking are raw, grilled, roasted and fried. a thing can be needs cooking. Type of cutting is a kind of value. The type of cutting are uncut, sliced, diced and chopped.\";\n        }\n\n        predicates {\n            sharp(t) :: \"The {t} is sharp\";\n            cookable(t) :: \"The {t} is cookable\";\n            cuttable(t) :: \"The {t} is cuttable\";\n            drinkable(t) :: \"The {t} is drinkable\";\n        }\n\n        commands {\n            examine/t :: \"examine {t}\" :: \"examining the {t}\";\n        }\n    }\n}\n\ntype object {\n    inform7 {\n        type {\n            kind :: \"object\";\n        }\n    }\n}\n\n# container\ntype c : t {\n    predicates {\n        open(c);\n        closed(c);\n        locked(c);\n\n        in(o, c);\n    }\n\n    rules {\n        lock/c   :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & closed(c) -> locked(c);\n        unlock/c :: $at(P, r) & $at(c, r) & $in(k, I) & $match(k, c) & locked(c) -> closed(c);\n\n        open/c  :: $at(P, r) & $at(c, r) & closed(c) -> open(c);\n        close/c :: $at(P, r) & $at(c, r) & open(c) -> closed(c);\n    }\n\n    reverse_rules {\n        lock/c :: unlock/c;\n        open/c :: close/c;\n    }\n\n    constraints {\n        c1 :: open(c)   & closed(c) -> fail();\n        c2 :: open(c)   & locked(c) -> fail();\n        c3 :: closed(c) & locked(c) -> fail();\n    }\n\n    inform7 {\n        type {\n            kind :: \"container\";\n            definition :: \"containers are openable, lockable and fixed in place. containers are usually closed.\";\n        }\n\n        predicates {\n            open(c) :: \"The {c} is open\";\n            closed(c) :: \"The {c} is closed\";\n            locked(c) :: \"The {c} is locked\";\n\n            in(o, c) :: \"The {o} is in the {c}\";\n        }\n\n        commands {\n            open/c :: \"open {c}\" :: \"opening the {c}\";\n            close/c :: \"close {c}\" :: \"closing the {c}\";\n\n            lock/c :: \"lock {c} with {k}\" :: \"locking the {c} with the {k}\";\n            unlock/c :: \"unlock {c} with {k}\" :: \"unlocking the {c} with the {k}\";\n        }\n    }\n}\n\n# stove\ntype stove : s {\n    rules {\n        cook/stove/burned :: $at(P, r) & $at(stove, r) & $in(f, I) & cooked(f) & edible(f) -> burned(f) & inedible(f);\n        cook/stove/cooked/raw :: $at(P, r) & $at(stove, r) & $in(f, I) & raw(f)            -> fried(f) & cooked(f);\n        cook/stove/cooked/needs_cooking :: $at(P, r) & $at(stove, r) & $in(f, I) & needs_cooking(f) & inedible(f) -> fried(f) & edible(f) & cooked(f);\n    }\n\n    inform7 {\n        type {\n            kind :: \"stove-like\";\n            definition :: \"stove-like is a source of heat.\";\n        }\n\n        commands {\n            cook/stove/cooked/raw           :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/cooked/needs_cooking :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n            cook/stove/burned               :: \"cook {f} with {stove}\" :: \"cooking the {f} with the {stove}\";\n        }\n    }\n}\n\n# supporter\ntype s : t {\n    predicates {\n        on(o, s);\n    }\n\n    inform7 {\n        type {\n            kind :: \"supporter\";\n            definition :: \"supporters are fixed in place.\";\n        }\n\n        predicates {\n            on(o, s) :: \"The {o} is on the {s}\";\n        }\n    }\n}\n\n", "text_grammars_path": "/home/petranokhin/anaconda3/envs/jericho/lib/python3.10/site-packages/textworld/challenges/tw_cooking/textworld_data/text_grammars"}, "metadata": {"seeds": {"map": 1724, "objects": 33936, "quest": 6228, "grammar": 48323}, "goal": "You open the copy of 'Cooking: A Modern Approach (3rd Ed.)' and start reading:\n\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\ngreen hot pepper\n  pork chop\n  purple potato\n  red tuna\n  yellow potato\n\nDirections:\nslice the green hot pepper\n  fry the green hot pepper\n  chop the pork chop\n  roast the pork chop\n  slice the purple potato\n  roast the purple potato\n  chop the red tuna\n  grill the red tuna\n  chop the yellow potato\n  roast the yellow potato\n  prepare meal\n", "recipe": "\nRecipe #1\n---------\nGather all following ingredients and follow the directions to prepare this tasty meal.\n\nIngredients:\ngreen hot pepper\n  pork chop\n  purple potato\n  red tuna\n  yellow potato\n\nDirections:\nslice the green hot pepper\n  fry the green hot pepper\n  chop the pork chop\n  roast the pork chop\n  slice the purple potato\n  roast the purple potato\n  chop the red tuna\n  grill the red tuna\n  chop the yellow potato\n  roast the yellow potato\n  prepare meal\n", "ingredients": [["green hot pepper", "fried", "sliced"], ["pork chop", "roasted", "chopped"], ["purple potato", "roasted", "sliced"], ["red tuna", "grilled", "chopped"], ["yellow potato", "roasted", "chopped"]], "settings": {"third_party": null, "subcommand": "tw-cooking", "recipe": 5, "take": 5, "go": 12, "open": true, "cook": true, "cut": true, "drop": true, "recipe_seed": 0, "split": null, "output": "tw_games/cook_paper/cook_hardest_7/game.z8", "seed": 37162, "format": "z8", "overview": true, "save_overview": false, "force": false, "silent": false, "verbose": false}, "entities": ["meal", "kitchen", "corridor", "livingroom", "bedroom", "bathroom", "pantry", "backyard", "shed", "garden", "driveway", "street", "supermarket", "frosted-glass door", "screen door", "wooden door", "front door", "commercial glass door", "table", "stove", "oven", "counter", "fridge", "BBQ", "shelf", "showcase", "toolbox", "patio chair", "toilet", "sofa", "bed", "patio table", "workbench", "cookbook", "knife", "green hot pepper", "pork chop", "purple potato", "red tuna", "yellow potato", "green bell pepper", "red bell pepper", "red apple", "white tuna", "yellow onion", "red potato", "lettuce", "red onion", "white onion", "banana", "green apple", "carrot", "tomato", "orange bell pepper", "red hot pepper", "yellow bell pepper", "block of cheese", "yellow apple"], "nb_distractors": 12, "walkthrough": ["inventory", "go west", "examine cookbook", "open screen door", "go north", "go north", "take green hot pepper", "go south", "open screen door", "go south", "open fridge", "take pork chop from fridge", "open screen door", "go north", "go north", "take purple potato", "go south", "open screen door", "go south", "go east", "go south", "open front door", "go south", "go west", "open commercial glass door", "go west", "take red tuna from showcase", "open commercial glass door", "go east", "go east", "open front door", "go north", "go north", "go west", "open screen door", "go north", "go north", "take yellow potato", "go south", "open screen door", "go south", "cook green hot pepper with stove", "cook pork chop with oven", "cook purple potato with oven", "open screen door", "go north", "cook red tuna with BBQ", "open screen door", "go south", "cook yellow potato with oven", "drop pork chop", "take knife from table", "slice green hot pepper with knife", "drop knife", "take pork chop", "drop purple potato", "take knife", "chop pork chop with knife", "drop knife", "take purple potato", "drop red tuna", "take knife", "slice purple potato with knife", "drop knife", "take red tuna", "drop yellow potato", "take knife", "chop red tuna with knife", "drop knife", "take yellow potato", "drop green hot pepper", "take knife", "chop yellow potato with knife", "drop knife", "take green hot pepper", "prepare meal", "eat meal"], "max_score": 17, "uuid": "tw-cooking-recipe5+take5+cook+cut+open+drop+go12-6k03cX3sbDJCWRJ"}, "objective": "You are hungry! Let's cook a delicious meal. Check the cookbook in the kitchen for the recipe. Once done, enjoy your meal!"}